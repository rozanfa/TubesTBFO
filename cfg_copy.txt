PROGRAM_GRAMMAR -> CODE_CONTENT

CODE_CONTENT -> ENDL CODE_CONTENT | CODE_CONTENT ENDL | CODE_CONTENT ENDL CODE_CONTENT| IMPORT_GRAMMAR | CLASS_GRAMMAR | FOR_LOOP_GRAMMAR | WHILE_LOOP_GRAMMAR | CONDITIONAL_GRAMMAR | ASSIGNMENT_OPERATION | ARITMETHIC_OPERATION | FUNCTION_GRAMMAR | DEF_FUNC_GRAMMAR | BOOL_EXPRESSION

/* TRUE FALSE */
TRUE -> n
FALSE -> o

/* NOT IS IN */
NOT -> A
IS -> q


/ *OR AND */
OR -> s
AND -> t

/* CLASS */
CLASS -> u
CLASS_GRAMMAR -> CLASS_HEADER CLASS_BODY
CLASS_HEADER -> CLASS ANY TITIK_DUA ENDL | CLASS ANY KURUNG_BUKA CLASS_PARAM KURUNG_TUTUP TITIK_DUA ENDL
CLASS_PARAM -> CLASS_PARAM KOMA CLASS_PARAM | ANY
CLASS_BODY -> CLASS_BODY ENDL CLASS_BODY | CLASS_BODY ENDL | CONDITIONAL_GRAMMAR  | CLASS_GRAMMAR | DEF_FUNC_GRAMMAR | WHILE_LOOP_GRAMMAR | LOOP_GRAMMAR | IMPORT_GRAMMAR | METHOD_GRAMMAR | FUNCTION_GRAMMAR | PASS | STRING

METHOD_GRAMMAR -> METHOD_INIT TITIK METHOD_GRAMMAR | METHOD_BACK_FUNC | METHOD_BACK_NAME
METHOD_GRAMMAR_NAME -> METHOD_INIT TITIK METHOD_GRAMMAR_NAME | METHOD_BACK_NAME
METHOD_GRAMMAR_FUNC -> METHOD_INIT TITIK METHOD_GRAMMAR_FUNC | METHOD_BACK_FUNC
METHOD_INIT -> KURUNG_BUKA METHOD_INIT KURUNG_TUTUP | METHOD_BACK_FUNC | METHOD_BACK_NAME
METHOD_BACK_FUNC -> FUNCTION_GRAMMAR
METHOD_BACK_NAME -> ANY

/* FUNCTION_GRAMMAR */
DEF -> v
DEF_FUNC_GRAMMAR -> DEF_FUNC_HEADER DEF_FUNC_BODY
DEF_FUNC_HEADER -> DEF ANY KURUNG_BUKA DEF_FUNC_PARAM KURUNG_TUTUP TITIK_DUA ENDL | DEF ANY KURUNG_BUKA KURUNG_TUTUP TITIK_DUA ENDL
DEF_FUNC_BODY -> DEF_FUNC_BODY ENDL DEF_FUNC_BODY | CODE_CONTENT
DEF_FUNC_RETURN ->  RETURN DEF_FUNC_RETURN_VAL | RETURN
DEF_FUNC_RETURN_VAL -> FUNCTION_GRAMMAR | VARIABEL | STRING
DEF_FUNC_PARAM -> DEF_FUNC_PARAM KOMA DEF_FUNC_PARAM | ANY
RETURN -> w

// pemanggilan fungsi FUNCTION_GRAMMAR
FUNCTION_GRAMMAR -> FUNCTION_BASE
FUNCTION_BASE -> VARIABEL KURUNG_BUKA FUNCTION_PARAM KURUNG_TUTUP | VARIABEL KURUNG_BUKA KURUNG_TUTUP
FUNCTION_PARAM -> FUNCTION_PARAM KOMA FUNCTION_PARAM | VARIABEL | STRING | FUNCTION_GRAMMAR


/* STRING */
// String
STRING -> x | STRING KALI POSITIVE_NUMBER | STRING TAMBAH STRING

// ANY
ANY -> z



/* IMPORT */

IMPORT_GRAMMAR -> IMPORT_GRAMMAR ENDL IMPORT_GRAMMAR | IMPORT LIB ENDL | FROM LIB IMPORT LIB_CONTENT ENDL | IMPORT LIB AS VARIABEL ENDL | FROM LIB IMPORT CONTENT AS VARIABEL ENDL | IMPORT MULTIPLE_IMPORT
MULTIPLE_IMPORT -> MULTIPLE_IMPORT KOMA MULTIPLE_IMPORT | LIB AS VARIABEL 
LIB_CONTENT -> LIB_CONTENT KOMA LIB_CONTENT | CONTENT
FROM -> B
IMPORT -> Q
AS -> R
LIB -> ANY
CONTENT -> ANY

/* LOOP_GRAMMAR */

LOOP_GRAMMAR -> FOR_LOOP_GRAMMAR | WHILE_LOOP_GRAMMAR


/* FOR LOOP */

FOR_LOOP_GRAMMAR -> FOR_LOOP_HEADER LOOP_CONTENT 
FOR_LOOP_HEADER -> FOR FOR_VARIABEL IN ITERATABLE TITIK_DUA ENDL | FOR VARIABEL IN ITERATABLE SPASI TITIK_DUA ENDL

FOR -> F
IN -> G
FOR_VARIABEL -> FOR_VARIABEL KOMA FOR_VARIABEL | VARIABEL
ITERATABLE -> FUNCTION_GRAMMAR | TUPLE | LIST | STRING | DICT | VARIABEL


/* WHILE LOOP */

WHILE_LOOP_GRAMMAR -> WHILE_LOOP_HEADER LOOP_CONTENT
WHILE_LOOP_HEADER -> WHILE BOOL_EXPRESSION TITIK_DUA ENDL

WHILE -> W


LOOP_CONTENT -> LOOP_CONTENT LOOP_CONTENT | CODE_CONTENT | CONTROL_FLOW_GRAMMAR

CONTROL_FLOW_GRAMMAR -> CONDITIONAL_HEADER CONTROL_FLOW_CONTENT | CONTROL_FLOW_CONTENT

CONTROL_FLOW_CONTENT -> BREAK | CONTINUE

BREAK -> B

CONTINUE -> C

CONDITIONAL_HEADER -> IF_HEADER | ELSE_HEADER | ELIF_HEADER

INT -> VARIABEL | NUMBER


/* CONDITIONAL */

CONDITIONAL_GRAMMAR -> IF_HEADER CONDITIONAL_CONTENT | IF_HEADER CONDITIONAL_CONTENT ELSE_CONDITION
IF_HEADER -> IF BOOL_EXPRESSION TITIK_DUA ENDL
IF -> I

ELSE_CONDITION -> ELSE_GRAMMAR | ELIF_GRAMMAR ELSE_GRAMMAR

ELIF_GRAMMAR -> ELIF_GRAMMAR ELIF_GRAMMAR | ELIF_HEADER CONDITIONAL_CONTENT
ELIF_HEADER -> ELIF | BOOL_EXPRESSION TITIK_DUA ENDL
ELIF -> J

ELSE_GRAMMAR -> ELSE_HEADER CONDITIONAL_CONTENT
ELSE_HEADER -> ELSE | BOOL_EXPRESSION TITIK_DUA ENDL
ELSE -> K

CONDITIONAL_CONTENT -> CONDITIONAL_CONTENT ENDL CONDITIONAL_CONTENT | PASS | CODE_CONTENT 

PASS -> Z

/* ADVANCED CONDITIONAL */

ADVANCED_CONDITIONAL -> ANY IF BOOL_EXPRESSION | ANY IF BOOL_EXPRESSION ELSE ANY


/* RAISE */
RAISE_GRAMMAR -> RAISE EROR_TYPE RAISE_CONTENT
EROR_TYPE -> ANY
RAISE_CONTENT ->  KURUNG_BUKA RAISE_CONTENT KURUNG_TUTUP | VARIABEL | CONSTANT | FUNCTION_GRAMMAR | LIST | STRING | DICT | NONE | BOOL_EXPRESSION | ARITMETHIC_OP | METHOD_GRAMMAR
RAISE -> o

/* OPEN_FILE */
OPEN_FILE_GRAMMAR -> WITH_HEADER CONTENT
WITH_HEADER -> WITH WITH_MODE AS VARIABEL TITIK_DUA ENDL
WITH_MODE -> FUNCTION_GRAMMAR | METHOD_GRAMMAR_FUNC
WITH -> D

/* VARIABEL */
VARIABEL -> KURUNG_BUKA VARIABEL KURUNG_TUTUP | VAR_SINGLE | ENDL VARIABEL | VARIABEL ENDL | ENDL VARIABEL ENDL | ADVANCED_CONDITIONAL | NUMBER | STRING
VAR_SINGLE -> NAME | NAME IDX_VARIABLE | METHOD_GRAMMAR_NAME | METHOD_GRAMMAR_NAME IDX_VARIABLE | STRING | NUMBER | CONSTANT | DICT | NONE | FUNCTION_GRAMMAR | METHOD_GRAMMAR | LIST
IDX_VARIABLE -> IDX_VARIABLE IDX_VARIABLE | [ IDX ] | [ TITIK_DUA ] | [ IDX TITIK_DUA ] | [ TITIK_DUA IDX ] | [ IDX TITIK_DUA IDX ] | [ TITIK_DUA TITIK_DUA ] | [ TITIK_DUA TITIK_DUA IDX ] | [ TITIK_DUA IDX TITIK_DUA ] | [ TITIK_DUA IDX TITIK_DUA IDX ] | [ IDX TITIK_DUA TITIK_DUA ] | [ IDX TITIK_DUA TITIK_DUA IDX ] | [ IDX TITIK_DUA IDX TITIK_DUA ] | [ IDX TITIK_DUA IDX TITIK_DUA IDX ] 
IDX -> VARIABEL | NUMBER | CONSTANT


/* OPERASI VARIABEL */

ARITMETHIC_OPERATION -> KURUNG_BUKA ARITMETHIC_OPERATION KURUNG_TUTUP | ARITMETHIC_OPERATION ARITMETHIC_OPERATOR ARITMETHIC_OPERATION | ARITMETHIC_OPERAN
ARITMETHIC_OPERAN -> NUMBER | VARIABEL | LIST | METHOD_GRAMMAR | ADVANCED_CONDITIONAL | FUNCTION_GRAMMAR
ARITMETHIC_OPERATOR -> ARITMETHIC_OP | BITWISE_OP

ASSIGNMENT_OPERATION -> VARIABEL ASSIGNMENT_OP ASSIGNMENT_OPERAN
ASSIGNMENT_OPERAN -> KURUNG_BUKA ASSIGNMENT_OPERAN KURUNG_TUTUP | ARITMETHIC_OPERATION | DICT | TUPLE | NUMBER | STRING | VARIABEL | CONSTANT | DICT | NONE | FUNCTION_GRAMMAR | METHOD_GRAMMAR | LIST | ADVANCED_CONDITIONAL


/* TUPLE */

TUPLE -> KURUNG_BUKA TUPLE_VAR KURUNG_TUTUP
TUPLE_VAR -> TUPLE_VAR KOMA TUPLE_VAR | STRING | VARIABEL | CONSTANT | DICT | NONE | FUNCTION_GRAMMAR | METHOD_GRAMMAR | LIST 

/* NUMBER */
NUMBER -> TAMBAH NUMBER | KURANG NUMBER | NUM_SINGLE
POSITIVE_NUMBER -> TAMBAH POSITIVE_NUMBER | NUM_SINGLE
NEGATIVE_NUMBER -> KURANG NEGATIVE_NUMBER | NUM_SINGLE
NUM_SINGLE -> p
CONSTANT -> KURUNG_BUKA CONSTANT KURUNG_TUTUP | CONS_SINGLE
CONS_SINGLE -> TRUE | FALSE | NUMBER

/* LIST */
LIST -> KURUNG_SIKU_BUKA KURUNG_SIKU_TUTUP | KURUNG_SIKU_BUKA LIST_CONTENTS KURUNG_SIKU_TUTUP
LIST_CONTENTS -> LIST_TYPE | LIST_TYPE FOR VARIABEL IN FUNCTION_GRAMMAR | LIST_CONTENTS KOMA LIST_TYPE
LIST_TYPE -> STRING | VARIABEL | CONSTANT | DICT | NONE | FUNCTION_GRAMMAR | METHOD_GRAMMAR | LIST 

/* DICT */
DICT -> KURUNG_KURAWAL_BUKA KURUNG_KURAWAL_TUTUP | KURUNG_KURAWAL_BUKA DICT_CONTENTS KURUNG_KURAWAL_TUTUP
DICT_CONTENTS -> DICT_CONTENT | DICT_CONTENT KOMA DICT_CONTENT
DICT_CONTENT -> DICT_TYPE TITIK_DUA DICT_TYPE
DICT_TYPE -> STRING | VARIABEL | CONSTANT | DICT | NONE | FUNCTION_GRAMMAR | METHOD_GRAMMAR | LIST



/* BOOLEAN EXPRESSION */

BOOL_EXPRESSION -> BOOL_EXPRESSION BOOLEAN_OPERATOR BOOL_EXPRESSION | BOOLEAN | NOT BOOLEAN
BOOLEAN -> VARIABEL | NAME | VARIABEL COMPARISON_OP VARIABEL | VARIABEL BITWISE_OP VARIABEL | TRUE | FALSE
BOOLEAN_OPERATOR ->  MEMBERSHIP_OP | IDENTITY_OP | LOGIC_OP









NUMBER -> p
NONE -> X
NAME -> z

/* SYMBOLS */

TITIK_DUA -> :
PETIK -> '
PETIK_DUA -> "
TITIK -> .
KOMA -> ,

TAMBAH -> +
KURANG -> -
KALI -> *
BAGI -> /

ENDL -> ENDL ENDL | endl
SPASI -> SPASI SPASI | spasi

LOGIC_OP -> AND | OR | NOT
COMPARISON_OP -> = = | ! = | = > | = < | < | >

BITWISE_OP -> & | or_bit | ~ | ^ | > > | < <
ARITMETHIC_OP -> + | - | * | * * | / | / / | %
ASSIGNMENT_OP -> = | + = | - = | * = | * * = | / = | / / = | % = | & = | or_bit = | ~ = | ^ = | > > = | < < =

MEMBERSHIP_OP -> IN | NOT SPASI IN
IDENTITY_OP -> IS | IS SPASI NOT 

KURUNG_BUKA -> (
KURUNG_TUTUP -> )
KURUNG_SIKU_BUKA -> [
KURUNG_SIKU_TUTUP -> ]
KURUNG_KURAWAL_BUKA -> {
KURUNG_KURAWAL_TUTUP -> }
